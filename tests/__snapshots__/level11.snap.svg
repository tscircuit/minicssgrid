<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <circle data-type="point" data-label="" data-x="0" data-y="0" cx="40" cy="247.5029239766082" r="3" fill="black" />
  </g>
  <g>
    <circle data-type="point" data-label="" data-x="100" data-y="0" cx="170.99415204678363" cy="247.5029239766082" r="3" fill="black" />
  </g>
  <g>
    <circle data-type="point" data-label="" data-x="100" data-y="100" cx="170.99415204678363" cy="378.49707602339186" r="3" fill="black" />
  </g>
  <g>
    <circle data-type="point" data-label="" data-x="0" data-y="100" cx="40" cy="378.49707602339186" r="3" fill="black" />
  </g>
  <g>
    <circle data-type="point" data-label="corner" data-x="247.5" data-y="0" cx="364.2105263157895" cy="247.5029239766082" r="3" fill="black" />
  </g>
  <g>
    <circle data-type="point" data-label="corner" data-x="347.5" data-y="0" cx="495.2046783625731" cy="247.5029239766082" r="3" fill="black" />
  </g>
  <g>
    <circle data-type="point" data-label="corner" data-x="347.5" data-y="100" cx="495.2046783625731" cy="378.49707602339186" r="3" fill="black" />
  </g>
  <g>
    <circle data-type="point" data-label="corner" data-x="247.5" data-y="100" cx="364.2105263157895" cy="378.49707602339186" r="3" fill="black" />
  </g>
  <g>
    <rect data-type="rect" data-label="center-item" data-x="50" data-y="50" x="40" y="247.5029239766082" width="130.99415204678363" height="130.99415204678365" fill="hsl(240deg, 100%, 50%)" stroke="black" stroke-width="0.7633928571428572" />
  </g>
  <g>
    <rect data-type="rect" data-label="another-item" data-x="150" data-y="50" x="170.99415204678363" y="247.5029239766082" width="130.99415204678363" height="130.99415204678365" fill="hsl(120deg, 100%, 50%)" stroke="black" stroke-width="0.7633928571428572" />
  </g>
  <g>
    <rect data-type="rect" data-label="center-item" data-x="297.5" data-y="50" x="393.6842105263158" y="308.41520467836256" width="72.046783625731" height="9.169590643274887" fill="hsl(240deg, 100%, 50%)" stroke="black" stroke-width="0.7633928571428572" />
  </g>
  <g>
    <rect data-type="rect" data-label="another-item" data-x="397.5" data-y="50" x="521.4035087719299" y="308.41520467836256" width="78.59649122807014" height="9.169590643274887" fill="hsl(120deg, 100%, 50%)" stroke="black" stroke-width="0.7633928571428572" />
  </g><text data-type="text" data-label="algo" data-x="100" data-y="110.6875" x="170.99415204678363" y="392.49707602339186" fill="black" font-size="14" font-family="sans-serif" text-anchor="middle" dominant-baseline="text-after-edge">algo</text><text data-type="text" data-label="correct" data-x="337.5" data-y="110.6875" x="482.10526315789474" y="392.49707602339186" fill="black" font-size="14" font-family="sans-serif" text-anchor="middle" dominant-baseline="text-after-edge">correct</text>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 1.3099415204678362,
        "c": 0,
        "e": 40,
        "b": 0,
        "d": 1.3099415204678362,
        "f": 247.5029239766082
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>